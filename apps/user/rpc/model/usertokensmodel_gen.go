// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stringx"
	"gorm.io/gorm"
)

var (
	userTokensFieldNames          = builder.RawFieldNames(&UserTokens{})
	userTokensRows                = strings.Join(userTokensFieldNames, ",")
	userTokensRowsExpectAutoSet   = strings.Join(stringx.Remove(userTokensFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	userTokensRowsWithPlaceHolder = strings.Join(stringx.Remove(userTokensFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheUserTokensKeyPrefix = "cache:userTokens:tokenKey:"
)

type (
	userTokensModel interface {
		Insert(ctx context.Context, data *UserTokens) error
		FindOne(ctx context.Context, tokenKey string) (*UserTokens, error)
		Update(ctx context.Context, data *UserTokens) error
	}

	defaultUserTokensModel struct {
		gormc.CachedConn
		table string
	}

	UserTokens struct {
		Id         int64     `gorm:"column:id"`
		UserId     int64     `gorm:"column:user_id"`
		Token      string    `gorm:"column:token"`
		TokenKey   string    `gorm:"column:token_key"` // // token 的 MD5值
		Status     int64     `gorm:"column:status"`    // 0失效-1有效
		ExpireTime int64     `gorm:"column:expire_time"`
		CreatedAt  time.Time `gorm:"column:created_at"`
		UpdatedAt  time.Time `gorm:"column:updated_at"`
	}
)

func newUserTokensModel(conn *gorm.DB, c cache.CacheConf) *defaultUserTokensModel {
	return &defaultUserTokensModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user_tokens`",
	}
}

func (m *defaultUserTokensModel) Insert(ctx context.Context, data *UserTokens) error {
	userTokensIdKey := fmt.Sprintf("%s%v", cacheUserTokensKeyPrefix, data.TokenKey)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(&data).Error
	}, userTokensIdKey)
	return err
}

func (m *defaultUserTokensModel) FindOne(ctx context.Context, tokenKey string) (*UserTokens, error) {
	userTokensIdKey := fmt.Sprintf("%s%v", cacheUserTokensKeyPrefix, tokenKey)
	var resp UserTokens
	err := m.QueryCtx(ctx, &resp, userTokensIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&UserTokens{}).Where("`token_key` = ?", tokenKey).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTokensModel) Update(ctx context.Context, data *UserTokens) error {
	userTokensIdKey := fmt.Sprintf("%s%v", cacheUserTokensKeyPrefix, data.TokenKey)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Select("status").Save(data).Error
	}, userTokensIdKey)
	return err
}

func (m *defaultUserTokensModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserTokensKeyPrefix, primary)
}

func (m *defaultUserTokensModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&UserTokens{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultUserTokensModel) tableName() string {
	return m.table
}

func (UserTokens) TableName() string {
	return "user_tokens"
}
